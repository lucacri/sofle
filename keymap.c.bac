
/* Copyright 2021 Dane Evans
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
// SOFLE RGB
#include <stdio.h>
#include "oled.c"

#include QMK_KEYBOARD_H

#define INDICATOR_BRIGHTNESS 30

#define HSV_OVERRIDE_HELP(h, s, v, Override) h, s, Override
#define HSV_OVERRIDE(hsv, Override) HSV_OVERRIDE_HELP(hsv, Override)

// Light combinations
#define SET_INDICATORS(hsv) \
    {0, 1, HSV_OVERRIDE_HELP(hsv, INDICATOR_BRIGHTNESS)}, { 35 + 0, 1, hsv }
#define SET_UNDERGLOW(hsv) \
    {1, 6, hsv}, { 35 + 1, 6, hsv }
#define SET_NUMPAD(hsv) \
    {35 + 15, 5, hsv}, {35 + 22, 3, hsv}, { 35 + 27, 3, hsv }
#define SET_NUMROW(hsv) \
    {10, 2, hsv}, {20, 2, hsv}, {30, 2, hsv}, {35 + 10, 2, hsv}, {35 + 20, 2, hsv}, { 35 + 30, 2, hsv }
#define SET_INNER_COL(hsv) \
    {33, 4, hsv}, { 35 + 33, 4, hsv }

#define SET_OUTER_COL(hsv) \
    {7, 4, hsv}, { 35 + 7, 4, hsv }
#define SET_THUMB_CLUSTER(hsv) \
    {25, 2, hsv}, { 35 + 25, 2, hsv }
#define SET_LAYER_ID(hsv) \
    {0, 1, HSV_OVERRIDE_HELP(hsv, INDICATOR_BRIGHTNESS)}, {35 + 0, 1, HSV_OVERRIDE_HELP(hsv, INDICATOR_BRIGHTNESS)}, {1, 6, hsv}, {35 + 1, 6, hsv}, {7, 4, hsv}, {35 + 7, 4, hsv}, {25, 2, hsv}, { 35 + 25, 2, hsv }

enum sofle_layers { _DEFAULTS = 0, _QWERTY = 0, _MOUSE, _SYMBOLS, _MOVE };

enum custom_keycodes { KC_QWERTY = SAFE_RANGE, KC_COLEMAK, KC_COLEMAKDH, KC_LOWER, KC_RAISE, KC_ADJUST, KC_D_MUTE };

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
/* ┌──────┬──────┬──────┬──────┬──────┬──────┐                    ┌──────┬──────┬──────┬──────┬──────┬──────┐
 * │ ESC  │  1   │  2   │  3   │  4   │  5   │                    │  6   │  7   │  8   │  9   │  0   │ BSPC │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤                    ├──────┼──────┼──────┼──────┼──────┼──────┤
 * │ TAB  │  Q   │  W   │  E   │  R   │  T   │                    │  Y   │  U   │  I   │  O   │  P   │ MINS │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤                    ├──────┼──────┼──────┼──────┼──────┼──────┤
 * │ GRV  │  A   │  S   │  D   │  F   │  G   │┌──────┐    ┌──────┐│  H   │  J   │  K   │  L   │ SCLN │ QUOT │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤│TG(1) │    │TG(1) │├──────┼──────┼──────┼──────┼──────┼──────┤
 * │ LSFT │  Z   │  X   │  C   │  V   │  B   │└──────┘    └──────┘│  N   │  M   │ COMM │ DOT  │ SLSH │ RSFT │
 * └──────┴──────┼──────┼──────┼──────┼──────┼───────┐    ┌───────┼──────┼──────┼──────┼──────┼──────┴──────┘
 *               │ LCTL │ LALT │ LGUI │MO(2) │  ENT  │    │  SPC  │MO(3) │ RGUI │ RALT │ LCTL │
 *               │      │      │      │      │       │    │       │      │      │      │      │
 *               └──────┴──────┴──────┴──────┴───────┘    └───────┴──────┴──────┴──────┴──────┘
 *                                                                                   generated by [keymapviz] */
    [_QWERTY] = LAYOUT(KC_ESC, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7, KC_8, KC_9, KC_0, KC_BSPC, KC_TAB, KC_Q, KC_W, KC_E, KC_R, KC_T, KC_Y, KC_U, KC_I, KC_O, KC_P, KC_MINS, KC_GRV, KC_A, KC_S, KC_D, KC_F, KC_G, KC_H, KC_J, KC_K, KC_L, KC_SCLN, KC_QUOT, KC_LSFT, KC_Z, KC_X, KC_C, KC_V, KC_B, TG(1), TG(1), KC_N, KC_M, KC_COMM, KC_DOT, KC_SLSH, KC_RSFT, KC_LCTL, KC_LALT, KC_LGUI, MO(2), KC_ENT, KC_SPC, MO(3), KC_RGUI, KC_RALT, KC_LCTL),
/* ┌──────┬──────┬──────┬──────┬──────┬──────┐                    ┌──────┬──────┬──────┬──────┬──────┬──────┐
 * │RGB_TO│  1   │  2   │  3   │  4   │  5   │                    │  6   │  7   │  8   │  9   │  0   │ GRV  │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤                    ├──────┼──────┼──────┼──────┼──────┼──────┤
 * │ ESC  │  Q   │  W   │  F   │  P   │MS_WH_│                    │MS_BTN│MS_BTN│MS_BTN│MS_BTN│ SCLN │ BSPC │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤                    ├──────┼──────┼──────┼──────┼──────┼──────┤
 * │ TAB  │  A   │  R   │  S   │  T   │MS_WH_│┌──────┐    ┌──────┐│  M   │  N   │  E   │  I   │  O   │ QUOT │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤│MS_BTN│    │TG(1) │├──────┼──────┼──────┼──────┼──────┼──────┤
 * │ LSFT │  Z   │  X   │  C   │  D   │  V   │└──────┘    └──────┘│  K   │  H   │ COMM │ DOT  │ SLSH │ RSFT │
 * └──────┴──────┼──────┼──────┼──────┼──────┼───────┐    ┌───────┼──────┼──────┼──────┼──────┼──────┴──────┘
 *               │ LGUI │ LALT │ LCTL │TG(1) │  ENT  │    │  SPC  │TG(1) │ RCTL │ RALT │ RGUI │
 *               │      │      │      │      │       │    │       │      │      │      │      │
 *               └──────┴──────┴──────┴──────┴───────┘    └───────┴──────┴──────┴──────┴──────┘
 *                                                                                   generated by [keymapviz] */
    [_MOUSE] = LAYOUT(RGB_TOG, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7, KC_8, KC_9, KC_0, KC_GRV, KC_ESC, KC_Q, KC_W, KC_F, KC_P, KC_MS_WH_UP, KC_MS_BTN1, KC_MS_BTN2, KC_MS_BTN3, KC_MS_BTN4, KC_SCLN, KC_BSPC, KC_TAB, KC_A, KC_R, KC_S, KC_T, KC_MS_WH_DOWN, KC_M, KC_N, KC_E, KC_I, KC_O, KC_QUOT, KC_LSFT, KC_Z, KC_X, KC_C, KC_D, KC_V, KC_MS_BTN1, TG(1), KC_K, KC_H, KC_COMM, KC_DOT, KC_SLSH, KC_RSFT, KC_LGUI, KC_LALT, KC_LCTL, TG(1), KC_ENT, KC_SPC, TG(1), KC_RCTL, KC_RALT, KC_RGUI),

/* ┌──────┬──────┬──────┬──────┬──────┬──────┐                    ┌──────┬──────┬──────┬──────┬──────┬──────┐
 * │TILDE │  F1  │  F2  │  F3  │  F4  │  F5  │                    │  F6  │  F7  │  F8  │  F9  │ F10  │ F11  │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤                    ├──────┼──────┼──────┼──────┼──────┼──────┤
 * │ GRV  │  1   │ EXLM │ QUOT │ LPRN │ RPRN │                    │ MINS │ EQL  │  GT  │SWIN(K│SWIN(K│ F12  │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤                    ├──────┼──────┼──────┼──────┼──────┼──────┤
 * │      │ EXLM │ QUES │ DQUO │ LBRC │ RBRC │┌──────┐    ┌──────┐│ DLR  │ UNDS │  LT  │ LPRN │ RPRN │ PIPE │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤│      │    │      │├──────┼──────┼──────┼──────┼──────┼──────┤
 * │ LSFT │ EQL  │ DOT  │ PLUS │ LCBR │ RCBR │└──────┘    └──────┘│ SCLN │ PIPE │ BSLS │ COLN │ BSLS │ LSFT │
 * └──────┴──────┼──────┼──────┼──────┼──────┼───────┐    ┌───────┼──────┼──────┼──────┼──────┼──────┴──────┘
 *               │ LCTL │ LALT │ LGUI │      │       │    │ BSPC  │ LSFT │ RGUI │ RALT │ LCTL │
 *               │      │      │      │      │       │    │       │      │      │      │      │
 *               └──────┴──────┴──────┴──────┴───────┘    └───────┴──────┴──────┴──────┴──────┘
 *                                                                                   generated by [keymapviz] */
    [_SYMBOLS] = LAYOUT(KC_TILDE, KC_F1, KC_F2, KC_F3, KC_F4, KC_F5, KC_F6, KC_F7, KC_F8, KC_F9, KC_F10, KC_F11, KC_GRV, KC_1, KC_EXLM, KC_QUOT, KC_LPRN, KC_RPRN, KC_MINS, KC_EQL, KC_GT, SWIN(KC_LBRC), SWIN(KC_RBRC), KC_F12, KC_TRNS, KC_EXLM, KC_QUES, KC_DQUO, KC_LBRC, KC_RBRC, KC_DLR, KC_UNDS, KC_LT, KC_LPRN, KC_RPRN, KC_PIPE, KC_LSFT, KC_EQL, KC_DOT, KC_PLUS, KC_LCBR, KC_RCBR, KC_TRNS, KC_TRNS, KC_SCLN, KC_PIPE, KC_BSLS, KC_COLN, KC_BSLS, KC_LSFT, KC_LCTL, KC_LALT, KC_LGUI, KC_TRNS, KC_TRNS, KC_BSPC, KC_LSFT, KC_RGUI, KC_RALT, KC_LCTL),

/* ┌──────┬──────┬──────┬──────┬──────┬──────┐                    ┌──────┬──────┬──────┬──────┬──────┬──────┐
 * │ GRV  │ EQL  │ MINS │ LBRC │ RBRC │      │                    │ BSLS │ SLSH │      │      │      │ DEL  │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤                    ├──────┼──────┼──────┼──────┼──────┼──────┤
 * │      │LWIN(K│  UP  │LWIN(K│A(KC_R│ PGUP │                    │ PGUP │      │S(A(LW│S(A(LW│S(A(LW│ BSPC │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤                    ├──────┼──────┼──────┼──────┼──────┼──────┤
 * │      │ LEFT │ DOWN │ RGHT │A(KC_L│ PGDN │┌──────┐    ┌──────┐│ PGDN │S(A(LW│S(A(LW│S(A(LW│ DEL  │ BSPC │
 * ├──────┼──────┼──────┼──────┼──────┼──────┤│ MUTE │    │      │├──────┼──────┼──────┼──────┼──────┼──────┤
 * │      │LWIN(K│LWIN(K│LWIN(K│LWIN(K│      │└──────┘    └──────┘│      │S(A(LW│S(A(LW│      │      │      │
 * └──────┴──────┼──────┼──────┼──────┼──────┼───────┐    ┌───────┼──────┼──────┼──────┼──────┼──────┴──────┘
 *               │      │      │      │ LSFT │ BSPC  │    │       │      │      │      │      │
 *               │      │      │      │      │       │    │       │      │      │      │      │
 *               └──────┴──────┴──────┴──────┴───────┘    └───────┴──────┴──────┴──────┴──────┘
 *                                                                                   generated by [keymapviz] */
    [_MOVE] = LAYOUT(KC_GRV, KC_EQL, KC_MINS, KC_LBRC, KC_RBRC, KC_TRNS, KC_BSLS, KC_SLSH, KC_TRNS, KC_TRNS, KC_TRNS, KC_DEL, KC_TRNS, LWIN(KC_LEFT), KC_UP, LWIN(KC_RGHT), A(KC_RGHT), KC_PGUP, KC_PGUP, KC_TRNS, S(A(LWIN(SWIN(KC_F20)))), S(A(LWIN(SWIN(KC_F19)))), S(A(LWIN(SWIN(KC_F18)))), KC_BSPC, KC_TRNS, KC_LEFT, KC_DOWN, KC_RGHT, A(KC_LEFT), KC_PGDN, KC_PGDN, S(A(LWIN(SWIN(KC_F16)))), S(A(LWIN(SWIN(KC_F17)))), S(A(LWIN(SWIN(KC_F15)))), KC_DEL, KC_BSPC, KC_TRNS, LWIN(KC_Z), LWIN(KC_X), LWIN(KC_C), LWIN(KC_V), KC_NO, KC_MUTE, KC_TRNS, KC_NO, S(A(LWIN(SWIN(KC_M)))), S(A(LWIN(SWIN(KC_M)))), KC_TRNS, KC_NO, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_LSFT, KC_BSPC, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS, KC_TRNS)

};

#ifdef RGBLIGHT_ENABLE
char layer_state_str[70];
// Now define the array of layers. Later layers take precedence

// QWERTY,
// Light on inner column and underglow
const rgblight_segment_t PROGMEM layer_qwerty_lights[]    = RGBLIGHT_LAYER_SEGMENTS(SET_LAYER_ID(HSV_RED)

   );
const rgblight_segment_t PROGMEM layer_colemakdh_lights[] = RGBLIGHT_LAYER_SEGMENTS(SET_LAYER_ID(HSV_PINK));

// _NUM,
// Light on outer column and underglow
const rgblight_segment_t PROGMEM layer_num_lights[] = RGBLIGHT_LAYER_SEGMENTS(SET_LAYER_ID(HSV_TEAL)

);
// _SYMBOL,
// Light on inner column and underglow
const rgblight_segment_t PROGMEM layer_symbol_lights[] = RGBLIGHT_LAYER_SEGMENTS(SET_LAYER_ID(HSV_BLUE)

);
// _COMMAND,
// Light on inner column and underglow
const rgblight_segment_t PROGMEM layer_command_lights[] = RGBLIGHT_LAYER_SEGMENTS(SET_LAYER_ID(HSV_PURPLE));

//_NUMPAD
const rgblight_segment_t PROGMEM layer_numpad_lights[] = RGBLIGHT_LAYER_SEGMENTS(SET_INDICATORS(HSV_ORANGE), SET_UNDERGLOW(HSV_ORANGE), SET_NUMPAD(HSV_BLUE), {7, 4, HSV_ORANGE}, {25, 2, HSV_ORANGE}, {35 + 6, 4, HSV_ORANGE}, {35 + 25, 2, HSV_ORANGE});
// _SWITCHER   // light up top row
const rgblight_segment_t PROGMEM layer_switcher_lights[] = RGBLIGHT_LAYER_SEGMENTS(SET_LAYER_ID(HSV_GREEN), SET_NUMROW(HSV_GREEN));

const rgblight_segment_t* const PROGMEM my_rgb_layers[] = RGBLIGHT_LAYERS_LIST(

    layer_qwerty_lights,
    layer_num_lights, // overrides layer 1
    layer_symbol_lights, layer_command_lights, layer_numpad_lights,
    layer_switcher_lights, // Overrides other layers
    layer_colemakdh_lights);

layer_state_t layer_state_set_user(layer_state_t state) {
    rgblight_set_layer_state(0, layer_state_cmp(state, _DEFAULTS) && layer_state_cmp(default_layer_state, _QWERTY));
    rgblight_set_layer_state(7, layer_state_cmp(state, _DEFAULTS) && layer_state_cmp(default_layer_state, _MOUSE));

    rgblight_set_layer_state(1, layer_state_cmp(state, _MOUSE));
    rgblight_set_layer_state(2, layer_state_cmp(state, _SYMBOLS));
    rgblight_set_layer_state(3, layer_state_cmp(state, _MOVE));
    return state;
}
void keyboard_post_init_user(void) {
    // Enable the LED layers
    rgblight_layers = my_rgb_layers;

    rgblight_mode(10); // haven't found a way to set this in a more useful way
}
#endif

#ifdef OLED_ENABLE_____

static void render_logo(void) {
    static const char PROGMEM qmk_logo[] = {0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0x00};

    oled_write_P(qmk_logo, false);
}

static void print_status_narrow(void) {
    // Print current mode
    oled_write_P(PSTR("\n\n"), false);
    oled_write_ln_P(PSTR("Dane\nEvans"), false);

    oled_write_ln_P(PSTR(""), false);

    // snprintf(layer_state_str, sizeof(layer_state_str), "Layer: Undef-%ld", layer_state)

    switch (get_highest_layer(default_layer_state)) {
        case _QWERTY:
            oled_write_ln_P(PSTR("Qwrt"), false);
            break;
        case _COLEMAK:
            oled_write_ln_P(PSTR("Clmk"), false);
            break;
        case _COLEMAKDH:
            oled_write_ln_P(PSTR("CmkDH"), false);
            break;

        default:
            oled_write_ln_P(PSTR("Undef"), false);
    }
    oled_write_P(PSTR("\n\n"), false);
    // Print current layer
    oled_write_ln_P(PSTR("LAYER"), false);
    switch (get_highest_layer(layer_state)) {
        case _COLEMAK:
        case _QWERTY:
        case _COLEMAKDH:
            oled_write_P(PSTR("Base\n"), false);
            break;
        case _RAISE:
            oled_write_P(PSTR("Raise"), false);
            break;
        case _LOWER:
            oled_write_P(PSTR("Lower"), false);
            break;
        case _ADJUST:
            oled_write_P(PSTR("Adj\n"), false);
            break;
        case _NUMPAD:
            oled_write_P(PSTR("Nump\n"), false);
            break;
        case _SWITCH:
            oled_write_P(PSTR("Swit\n"), false);
            break;
        default:
            oled_write_ln_P(PSTR("Undef"), false);
    }
}

oled_rotation_t oled_init_user(oled_rotation_t rotation) {
    if (is_keyboard_master()) {
        return OLED_ROTATION_270;
    }
    return rotation;
}

bool oled_task_user(void) {
    if (is_keyboard_master()) {
        print_status_narrow();
    } else {
        render_logo();
    }
    return false;
}

#endif

bool process_record_user(uint16_t keycode, keyrecord_t* record) {
    switch (keycode) {
        case KC_QWERTY:
            if (record->event.pressed) {
                set_single_persistent_default_layer(_QWERTY);
            }
            return false;
        case KC_COLEMAK:
            if (record->event.pressed) {
                set_single_persistent_default_layer(_MOUSE);
            }
            return false;
        case KC_COLEMAKDH:
            if (record->event.pressed) {
                set_single_persistent_default_layer(_MOUSE);
            }
            return false;
        case KC_LOWER:
            if (record->event.pressed) {
                layer_on(_MOUSE);
                update_tri_layer(_MOUSE, _SYMBOLS, _MOVE);
            } else {
                layer_off(_MOUSE);
                update_tri_layer(_MOUSE, _SYMBOLS, _MOVE);
            }
            return false;
        case KC_RAISE:
            if (record->event.pressed) {
                layer_on(_SYMBOLS);
                update_tri_layer(_MOUSE, _SYMBOLS, _MOVE);
            } else {
                layer_off(_SYMBOLS);
                update_tri_layer(_MOUSE, _SYMBOLS, _MOVE);
            }
            return false;
        case KC_ADJUST:
            if (record->event.pressed) {
                layer_on(_MOVE);
            } else {
                layer_off(_MOVE);
            }
            return false;
        case KC_D_MUTE:
            if (record->event.pressed) {
                register_mods(mod_config(MOD_MEH));
                register_code(KC_UP);
            } else {
                unregister_mods(mod_config(MOD_MEH));
                unregister_code(KC_UP);
            }
    }
    return true;
}

#ifdef ENCODER_ENABLE

bool encoder_update_user(uint8_t index, bool clockwise) {
    if (index == 0) {
        if (clockwise) {
            tap_code(KC_VOLU);
        } else {
            tap_code(KC_VOLD);
        }
    } else if (index == 1) {
        switch (get_highest_layer(layer_state)) {
            case _MOUSE:
                if (clockwise) {
                    tap_code(KC_PGDN);
                } else {
                    tap_code(KC_PGUP);
                }
                break;
            case _MOVE:
                if (clockwise) {
                    tap_code(KC_DOWN);
                } else {
                    tap_code(KC_UP);
                }
                break;
            default:
                if (clockwise) {
                    tap_code(KC_WH_D);
                } else {
                    tap_code(KC_WH_U);
                }
                break;
        }
    }
    return true;
}

#endif
